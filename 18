#include <DHT.h>
#include <LiquidCrystal.h>

// Definir los pines del LCD
const int rs = 12;
const int en = 11;
const int d4 = 10;
const int d5 = 9;
const int d6 = 8;
const int d7 = 7;

// Crear una instancia del LCD
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// Definir el pin del sensor DHT11 y el pin del ventilador
const int dhtPin = 2;
const int fanPin = 8; // Pin de control del transistor

// Definir el umbral de temperatura (en grados Celsius)
const float temperatureThreshold = 25.0;

DHT dht(dhtPin, DHT11);

void setup() {
  lcd.begin(16, 2); // Inicializar el LCD con 16 columnas y 2 filas
  dht.begin(); // Inicializar el sensor DHT11
  pinMode(fanPin, OUTPUT); // Configurar el pin del ventilador como salida
  digitalWrite(fanPin, LOW); // Asegurarse de que el ventilador esté apagado al principio
}

void loop() {
  // Leer los datos del sensor DHT11
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Verificar si las lecturas son válidas
  if (isnan(humidity) || isnan(temperature)) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Error en DHT11");
    digitalWrite(fanPin, LOW); // Apagar el ventilador si hay error
    return;
  }

  // Limpiar el LCD y mostrar los datos
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(temperature);
  lcd.print(" C");

  lcd.setCursor(0, 1);
  lcd.print("Humi: ");
  lcd.print(humidity);
  lcd.print(" %");

  // Controlar el ventilador basado en la temperatura
  if (temperature > temperatureThreshold) {
    digitalWrite(fanPin, HIGH); // Encender el ventilador
  } else {
    digitalWrite(fanPin, LOW); // Apagar el ventilador
  }

  // Esperar 2 segundos antes de la próxima lectura
  delay(2000);
}
